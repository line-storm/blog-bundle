{% extends 'LineStormBlogBundle:Admin:layout.html.twig' %}
{% block page_title %}New Blog Post{% endblock %}
{% block page_desc %}Pew Pew Pew{% endblock %}

{% block content %}
    <style>
        #blog-post-content {
            min-height: 400px;
            width: 100%;
            margin: 10px 0 0 0;
            padding: 0;
        }
        .post-component-row {
            padding: 0 0 10px 0;
            margin: 0 0 10px 0;
            border-bottom: 1px solid #cccccc;
            list-style: none;
        }
        .post-component-row > .component-handle {
            width: 30px;
            float: left;
        }
        .post-component-row > .component-handle > i {
            font-size: 18px;
            color: #aaa;
            cursor: ns-resize;
        }
        .post-component-row > .component-content {
            float: left;
            width: calc(100% - 35px);
        }
        .post-component {
            border: 1px solid #eaeaea;
            background-color: #fefefe;
            min-height: 200px;
        }

        .dragged {
            position: absolute;
            opacity: 0.5;
            z-index: 2000;
        }

        ul.example li.placeholder {
            position: relative;
            /** More li styles **/
        }
        ul.example li.placeholder:before {
            position: absolute;
            /** Define arrowhead **/
        }
    </style>
    {% stylesheets
        '@LineStormBlogBundle/Resources/public/css/dropzone.css'
        filter='cssrewrite' output='compiled/css/blog.css' %}
     <link rel="stylesheet" href="{{ asset_url }}" />
    {% endstylesheets %}

    {% javascripts
        '@LineStormBlogBundle/Resources/public/js/dropzone.js'
        output='compiled/js/blog.js' %}
        <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}

    {% for component in module.components %}
        {% javascripts
            '@LineStormBlogBundle/Resources/public/js/dropzone.js'
            output='compiled/js/blog.js' %}
            <script type="text/javascript" src="{{ asset_url }}"></script>
        {% endjavascripts %}
        <option value="{{ component.id }}">{{ component.name }}</option>
    {% endfor %}

    <script type="text/javascript" src="/bundles/linestormblog/js/ckeditor/ckeditor.js"></script>
    <script type="text/javascript" src="/bundles/linestormblog/js/ckeditor/adapters/jquery.js"></script>
    <script type="application/javascript">

        window.lineStormBlog = window.lineStormBlog || {};
        window.lineStormBlog.postManager = (function(options){

            var idCount = 1;

            var self = {};

            if(options === undefined){
                options = {};
            }

            self.options = $.extend({

            }, options);

            self.components = {};

            self.form = [];

            self.addComponent = function(name, callback){
                $.ajax({
                    url: '{{ path('linestorm_blog_admin_module_post_api_component_new_component') }}',
                    data: {
                        'component': name
                    },
                    success: function(o){
                        var $e = self.setupComponentForm(name, o.html);
                        var cId = ++idCount;
                        if(!$e.prop('id'))
                            $e.prop('id', 'post-component-'+cId);
                        $e.attr('data-component-id',    cId);
                        $e.attr('data-component-type',  name);
                        self.form.push({
                            id:         cId,
                            type:       name,
                            element:    $e
                        });
                        callback($e);
                    }
                });
            };

            self.removeComponent = function(id){
                var i, b, c;
                for( var i=0,b=self.form.length ; i<b ; i++ ){
                    c = self.form[i];
                    if(c.id === id){
                        self.form.splice(1, i);
                        return true;
                    }
                }
                return false;
            };

            self.save = function(callback){

                var i, b, c, v, data = {
                    components: [],
                    post: self.serializeForm($('form[name="linestorm_blogbundle_blogpost"]'))
                };
                for( i=0,b=self.form.length ; i<b ; i++ ){
                    c = self.form[i];
                    data.components.push({
                        type: c.type,
                        data: self.components[c.type].getValues(c)
                    });
                }

                $.ajax({
                    url: '{{ path('linestorm_blog_admin_module_post_api_post_post_post') }}',
                    type: 'POST',
                    data: JSON.stringify(data),
                    dataType: 'json',
                    success: callback
                });
            };

            self.setupComponentForm = function(name, html){
                var c = self.components[name];
                return c.setupForm(html);
            }

            self.importComponent = function(name, component){
                self.components[name] = component;
            }

            self.serializeForm = function($form){

                var self = this,
                        fname = $form.prop('name'),
                        json = {},
                        push_counters = {},
                        patterns = {
                            "validate": /^[a-zA-Z][a-zA-Z0-9_]*(?:\[(?:\d*|[a-zA-Z0-9_]+)\])*$/,
                            "key":      /[a-zA-Z0-9_]+|(?=\[\])/g,
                            "push":     /^$/,
                            "fixed":    /^\d+$/,
                            "named":    /^[a-zA-Z0-9_]+$/
                        };


                this.build = function(base, key, value){
                    base[key] = value;
                    return base;
                };

                this.push_counter = function(key){
                    if(push_counters[key] === undefined){
                        push_counters[key] = 0;
                    }
                    return push_counters[key]++;
                };

                $.each($form.serializeArray(), function(){

                    // skip invalid keys
                    if(!patterns.validate.test(this.name)){
                        return;
                    }

                    var k,
                            keys = this.name.match(patterns.key),
                            merge = this.value,
                            reverse_key = this.name;

                    while((k = keys.pop()) !== undefined){

                        // adjust reverse_key
                        reverse_key = reverse_key.replace(new RegExp("\\[" + k + "\\]$"), '');

                        // push
                        if(k.match(patterns.push)){
                            merge = self.build([], self.push_counter(reverse_key), merge);
                        }

                        // fixed
                        else if(k.match(patterns.fixed)){
                            merge = self.build([], k, merge);
                        }

                        // named
                        else if(k.match(patterns.named)){
                            merge = self.build({}, k, merge);
                        }
                    }

                    json = $.extend(true, json, merge);
                });

                if(fname && typeof json[fname] !== 'undefined')
                    return json[fname];
                else
                    return json;
            };

            return self;

        })();



        (function(){
            var component = (function(){

                var self = {};

                self.setupForm = function(html){
                    return $(html).attr('contenteditable', true).ckeditor().focus();
                };

                self.getValues = function(cObject){
                    var name = cObject.element.ckeditorGet().name;
                    var value = CKEDITOR.instances[name].getData();
                    return {
                        'body': value
                    }
                };

                return self;
            })();
            window.lineStormBlog.postManager.importComponent('article', component);
        })();



        (function(){
            var component = (function(){

                var self = {};

                self.setupForm = function(html){
                    return $(html);
                };

                return self;
            })();
            window.lineStormBlog.postManager.importComponent('gallery', component);
        })();



        $(document).ready(function () {

            var ComponentSelect = $('#ComponentSelect'),
                TitleContent = $('#blog-post-title'),
                PostContent = $('#blog-post-content'),
                PostSave    = $('.post-save')
            ;

            ComponentSelect.on('change', function(){
                if(this.selectedIndex <= 0)
                    return;

                var c = $(this).val();
                window.lineStormBlog.postManager.addComponent(c, function($component){
                    var $row;
                    $row = $('<li class="post-component-row"><div class="component-handle"><i class="fa-ellipsis-h fa-rotate-90 fa-2x pull-left fa-border"></i></div><div class="component-content"></div><div class="clearfix"></div></li>');
                    $component.appendTo($row.find('.component-content'));

                    $row.appendTo(PostContent);
                });
                this.selectedIndex = 0;
            });

            PostSave.on('click', function(){
                window.lineStormBlog.postManager.save(function(){
                    alert('saved!');
                });
            });

            PostContent.sortable({
                handle: '.component-handle > i'
            });
        });


        jQuery(document).ready(function() {
            var $tagCollectionHolder, $addTagLink;

            $addTagLink = $('a.add-tag-link');
            $tagCollectionHolder = $('ul.tags');
            $tagCollectionHolder.data('index', $tagCollectionHolder.find(':input').length);

            $addTagLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // add a new tag form (see next code block)
                addForm($tagCollectionHolder);
            });


            var $articleCollectionHolder, $addArticleLink;

            $addArticleLink = $('a.post-component-new');
            $articleCollectionHolder = $('.post-component-container');
            $articleCollectionHolder.data('index', $articleCollectionHolder.find(':input').length);

            $addArticleLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // add a new tag form (see next code block)
                var $el = addForm($articleCollectionHolder);
                var i = $articleCollectionHolder.data('index');
                $el.find('input[type="hidden"]').val(i);
                $el.find('[data-role="textarea"]').ckeditor().focus();
            });

        });

        function addForm($collectionHolder, element) {
            var elementHtml, prototype, index, newForm, $elementHtml;

            if(element === undefined)
                element = 'li';

            // Get the data-prototype explained earlier
            prototype = $collectionHolder.data('prototype');

            // get the new index
            index = $collectionHolder.data('index');

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            newForm = prototype.replace(/__name__/g, index);

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            if(element === 'li' || element === 'div'){
                elementHtml = "<"+element+">"+newForm+"</"+element+">";
            } else {
                elementHtml = '<li>"+newForm+"</li>';
            }

            $elementHtml = $(elementHtml);
            $collectionHolder.append($elementHtml);

            return $elementHtml;
        }

    </script>


    {{ form_start(form) }}

        {{ form_row(form.title) }}
        {{ form_row(form.liveOn) }}
        {{ form_row(form.category) }}

        <h3>Tags</h3>
        <ul class="tags" data-prototype="{{ form_widget(form.tags.vars.prototype)|e }}">
            <li><a href="#" class="add-tag-link">+ Add</a></li>
            {# iterate over each existing tag and render its only field: name #}
            {% for tag in form.tags %}
                <li>{{ form_row(tag.name) }}</li>
            {% endfor %}
        </ul>


        <h3>Content</h3>
        <div class="post-component-container" data-prototype="{{ form_widget(form.articles.vars.prototype)|e }}">
            <div class="post-component-new-container"><a href="#" class="post-component-new">add</a></div>
            <ul class="post-components">
                {% for article in form.articles %}
                    {{ form(article) }}
                {% endfor %}
            </ul>
        </div>
    {{ form_end(form) }}

    <button class="post-save btn btn-success">
        <i class="fa-save"></i> Save
    </button>

{% endblock %}
