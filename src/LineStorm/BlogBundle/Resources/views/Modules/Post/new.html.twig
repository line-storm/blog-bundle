{% extends 'LineStormBlogBundle:Admin:layout.html.twig' %}
{% block page_title %}New Post{% endblock %}
{% block page_desc %}Pew Pew Pew{% endblock %}

{% block content %}
    <style>
        #blog-post-content {
            min-height: 400px;
            width: 100%;
            margin: 10px 0 0 0;
            padding: 0;
        }
        .post-component-row {
            padding: 0 0 10px 0;
            margin: 0 0 10px 0;
            border-bottom: 1px solid #cccccc;
            list-style: none;
        }
        .post-component-row > .component-handle {
            width: 30px;
            float: left;
        }
        .post-component-row > .component-handle > i {
            font-size: 18px;
            color: #aaa;
            cursor: ns-resize;
        }
        .post-component-row > .component-content {
            float: left;
            width: calc(100% - 35px);
        }
        .post-component {
            min-height: 200px;
            margin-bottom: 20px;
        }

        .dragged {
            position: absolute;
            opacity: 0.5;
            z-index: 2000;
        }

        ul.example li.placeholder {
            position: relative;
            /** More li styles **/
        }
        ul.example li.placeholder:before {
            position: absolute;
            /** Define arrowhead **/
        }
        .tag-search {
            width:100%;
        }
    </style>
    {% stylesheets
        '@LineStormBlogBundle/Resources/public/css/dropzone.css'
        filter='cssrewrite' output='compiled/css/blog.css' %}
     <link rel="stylesheet" href="{{ asset_url }}" />
    {% endstylesheets %}
    <link rel="stylesheet" href="/bundles/linestormblog/css/select2.css" />

    {% javascripts
        '@LineStormBlogBundle/Resources/public/js/dropzone.js'
        '@LineStormBlogBundle/Resources/public/js/select2/select2.min.js'
        output='compiled/js/blog.js' %}
        <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}

    <script type="text/javascript" src="/bundles/linestormblog/js/ckeditor/ckeditor.js"></script>
    <script type="text/javascript" src="/bundles/linestormblog/js/ckeditor/adapters/jquery.js"></script>
    <script type="text/javascript">

        var contentCounts = {
            article: {count: 0},
            gallery: {count: 0},
            tag:     {count: 0}
        };

        var savePost = function(callback_success, callback_failure){
            var form, data, field, fname, method;

            form = $('form[name="linestorm_blogbundle_blogpost"]');
            method = form[0].method;

            callback_success = callback_success || null;
            callback_failure = callback_failure || null;

            data = {};

            for(var i=0 ; i<form[0].length ; ++i){
                field = form[0][i];
                if(field.name){
                    fname = field.name;

                    if(field.name === '_method'){
                        method = field.value;prote
                    } else if(field.type === 'radio'){
                        data[fname] = data[fname] || [];
                        data[fname].push(field.value);
                    } else if(field.type === 'checkbox'){
                        data[fname] = field.checked ? field.value : null;
                    } else {
                        if(field.name.match(/\[\]$/)){
                            fname = field.name.replace(/\[\]$/, '');
                            data[fname] = data[fname] || [];
                            data[fname].push($(field).val());
                        } else {
                            data[fname] = $(field).val();
                        }
                    }
                }
            }

            var sData = serializeForm(data);

            $.ajax({
                url: form[0].action,
                type: method,
                data: JSON.stringify(sData),
                dataType: 'json',
                success: callback_success,
                error: callback_failure
            });

        };

        var serializeForm = function($form){

            var self = this,
                json = {},
                push_counters = {},
                patterns = {
                    "validate": /^[a-zA-Z][a-zA-Z0-9_]*(?:\[(?:\d*|[a-zA-Z0-9_]+)\])*$/,
                    "key":      /[a-zA-Z0-9_]+|(?=\[\])/g,
                    "push":     /^$/,
                    "fixed":    /^\d+$/,
                    "named":    /^[a-zA-Z0-9_]+$/
                };


            this.build = function(base, key, value){
                base[key] = value;
                return base;
            };

            this.push_counter = function(key){
                if(push_counters[key] === undefined){
                    push_counters[key] = 0;
                }
                return push_counters[key]++;
            };

            $.each($form, function(i,v){

                // skip invalid keys
                if(!patterns.validate.test(this.name)){
                    return;
                }

                var k,
                    keys = i.match(patterns.key),
                    merge = v,
                    reverse_key = i;

                while((k = keys.pop()) !== undefined){

                    // adjust reverse_key
                    reverse_key = reverse_key.replace(new RegExp("\\[" + k + "\\]$"), '');

                    // push
                    if(k.match(patterns.push)){
                        merge = self.build([], self.push_counter(reverse_key), merge);
                    }

                    // fixed
                    else if(k.match(patterns.fixed)){
                        merge = self.build([], k, merge);
                    }

                    // named
                    else if(k.match(patterns.named)){
                        merge = self.build({}, k, merge);
                    }
                }

                json = $.extend(true, json, merge);
            });

            return json;
        };

        var parseError = function(e, p){
            if(p === undefined){
                p = 'error';
            }
            var errors = {}, childErrors;
            for(var i in e){
                if(i === 'errors'){
                    errors[p] = e[i];
                } else if ("string" === typeof e[i] || e[i] instanceof Array){
                    errors[i] = e[i];
                } else {
                    childErrors = parseError(e[i], i);
                    for (var attrname in childErrors) { errors[attrname] = childErrors[attrname]; }
                }
            }

            return errors;
        };

        $(document).ready(function(){
            $('form[name="linestorm_blogbundle_blogpost"]').on('submit', function(e){
                e.preventDefault();
                e.stopPropagation();
                $('#FormErrors').slideUp(function(){ $(this).html(''); });
                savePost(function(){
                    alert('saved!');
                }, function(e, status, ex){
                    if(e.status === 400){
                        if(e.responseJSON){
                            var errors = parseError(e.responseJSON.errors);
                            var str = '';
                            for(var i in errors){
                                if(errors[i].length)
                                    str += "<p class=''><strong style='text-transform:capitalize;'>"+i+":</strong> "+errors[i].join(', ')+"</p>";
                            }
                            $('#FormErrors').html(str).slideDown();
                        } else {
                            alert(status);
                        }
                    }
                });

                return false;
            });
        })



        jQuery(document).ready(function() {

            var $articleCollectionHolder, $addArticleLink, $addGalleryLink;

            $articleCollectionHolder = $('.post-components');
            $addArticleLink = $('a.post-component-new.article-new');

            $addArticleLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // Get the data-prototype explained earlier
                var prototype = $(this).data('prototype');

                // add a new tag form (see next code block)
                var $el = addForm($articleCollectionHolder, prototype, contentCounts.article);
                $el.find('input[type="hidden"]').val(contentCounts.gallery);
                $el.find('[data-role="textarea"]').ckeditor().focus();
            });

            $addGalleryLink = $('a.post-component-new.gallery-new');
            $addGalleryLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // Get the data-prototype explained earlier
                var prototype = $(this).data('prototype');

                // add a new tag form (see next code block)
                var $el = addForm($articleCollectionHolder, prototype, contentCounts.gallery);
                $el.find('input[type="hidden"]').val(contentCounts.gallery);
                $el.find('[data-role="textarea"]').ckeditor().focus();

                setupDropzone($el.find('.dropzone')[0]);
            });


        });

        function addForm($collectionHolder, prototype, indexer, element, name) {
            var elementHtml, index, newForm, $elementHtml;

            if(element === undefined)
                element = 'li';

            if(indexer === undefined){
                console.log('addForm: indexer must be defined');
                return;
            }

            if(name === undefined)
                name = '__name__'

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            var rgx = new RegExp(name, 'g');
            newForm = prototype.replace(rgx, indexer.count);
            indexer.count++;

            // Display the form in the page in an li, before the "Add a tag" link li
            if(element === 'li' || element === 'div'){
                elementHtml = "<"+element+">"+newForm+"</"+element+">";
            } else {
                elementHtml = "<li>"+newForm+"</li>";
            }

            $elementHtml = $(elementHtml);
            $collectionHolder.append($elementHtml);

            return $elementHtml;
        }

    </script>

    <script type="text/javascript">


        var setupDropzone = function(placeholder){

            var carrosselDropZone = new Dropzone(placeholder, {
                url: window.lineStormTags.mediaBank.path,
                acceptedFiles: 'image/*',
                init: function(){
                    this.on("success", function(file, response) {
                        var idx = contentCounts.tag.count;
                        var $form = addForm($(file.previewElement).find('.dz-image-form'), $(placeholder).data('prototype'), contentCounts.tag, 'div', '__img_name__');
                        $form.find('input[name*="[src]"]').val(response.url);
                        $form.find('input[name*="[order]"]').val(idx);
                    });
                    this.on("error", function(file, response) {
                        this.removeFile(file);
                        alert("Cannot add file: "+response);
                    });
                },
                previewTemplate:
                    '   <div class="dz-preview">' +
                    '       <img class="dz-image" data-dz-thumbnail />' +
                    '       <div class="dz-details">' +
                    '           <div class="row">' +
                    '               <div class="col-xs-12">' +
                    '                   <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>' +
                    '               </div>' +
                    '           </div>' +
                    '           <div class="row">' +
                    '               <div class="col-xs-4">' +
                    '                   <strong>Details:</strong>' +
                    '               </div>' +
                    '               <div class="col-xs-8">' +
                    '                   <div class="dz-size" data-dz-size></div>' +
                    '               </div>' +
                    '           </div>' +
                    '           <div class="dz-image-form"></div>' +
                    '       </div>' +
                    '       <div class="clearfix"></div>' +
                    '   </div>'
            });
        };

    </script>


    <div id="FormErrors" class="alert alert-danger" style="display: none;">

    </div>

    {{ form_start(form) }}
        {{ form_row(form.title) }}
        {{ form_row(form.liveOn) }}
        {{ form_row(form.category) }}

        <hr />

        <h3>Tags</h3>
        {{ form_row(form.tags, { attr: {class: 'tag-search'} }) }}
        <script type="text/javascript">
            $('.tag-search').select2({
                tags: $('.tag-search').data('options').split(','),
                tokenSeparators: [',', ' ', ';']
            });
        </script>

        <hr />

        <h3>Content</h3>
        <div class="post-component-container">
            <div class="post-component-new-container"><a href="#" class="post-component-new article-new" data-prototype="{{ form_widget(form.articles.vars.prototype)|e }}">Add Article</a></div>
            <div class="post-component-new-container"><a href="#" class="post-component-new gallery-new" data-prototype="{{ form_widget(form.galleries.vars.prototype)|e }}">Add Gallery</a></div>
            <ul class="post-components">
                {% for article in form.articles %}
                    {{ form(article) }}
                {% endfor %}
                {% for gallery in form.galleries %}
                    {{ form(gallery) }}
                {% endfor %}
            </ul>
        </div>

        {{ form_row(form.articles) }}
        {{ form_row(form.galleries) }}

        <div class="row">
            <div class="col-xs-2"></div>
            <div class="col-xs-10">
                <div id="PostContent"></div>
            </div>

        </div>

        <hr />

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="submit" class="btn btn-default post-save">Save</button>
            </div>
        </div>

    {{ form_end(form) }}

{% endblock %}
