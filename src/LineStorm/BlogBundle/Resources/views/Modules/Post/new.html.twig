{% extends 'LineStormBlogBundle:Admin:layout.html.twig' %}
{% block page_title %}New Post{% endblock %}
{% block page_desc %}Pew Pew Pew{% endblock %}

{% block content %}
    <style>
        #blog-post-content {
            min-height: 400px;
            width: 100%;
            margin: 10px 0 0 0;
            padding: 0;
        }
        .post-component-row {
            padding: 0 0 10px 0;
            margin: 0 0 10px 0;
            border-bottom: 1px solid #cccccc;
            list-style: none;
        }
        .post-component-row > .component-handle {
            width: 30px;
            float: left;
        }
        .post-component-row > .component-handle > i {
            font-size: 18px;
            color: #aaa;
            cursor: ns-resize;
        }
        .post-component-row > .component-content {
            float: left;
            width: calc(100% - 35px);
        }
        .post-component {
            min-height: 200px;
            margin-bottom: 20px;
        }

        .tag-search {
            width:100%;
        }
        ul.post-components {
            margin: 0;
            padding: 0;
        }
        ul.post-components > li {
            list-style: none;
        }
        div.post-component-item {
            position: relative;
        }
        div.post-component-item > .post-component-item-controls {
            position: absolute;
            top: 0;
            right: 0;
            width: 38px;
        }
        div.post-component-item > .post-component-item-controls > button,
        div.post-component-item > .post-component-item-controls > span {
            width: 38px;
            height: 38px;
            margin-bottom: 10px;
        }
        div.post-component-item > .post-component-item-controls > span.item-reorder {
            cursor: ns-resize;
        }
        div.post-component-item > .post-component-item-widget {
            width: calc(100% - 48px);
        }

        .fade-overlay {
            max-height: 200px;
            overflow: hidden;
            position: relative;
            border: 3px dashed #cccccc;
        }
        .fade-overlay:after {
            content: '';
            height: 100px;
            display: block;
            position: absolute;
            top: 100px;
            left: 0;
            width: 100%;
            background: -moz-linear-gradient(top,  rgba(255,255,255,0) 1%, rgba(255,255,255,0) 2%, rgba(255,255,255,1) 87%); /* FF3.6+ */
            background: -webkit-gradient(linear, left top, left bottom, color-stop(1%,rgba(255,255,255,0)), color-stop(2%,rgba(255,255,255,0)), color-stop(87%,rgba(255,255,255,1))); /* Chrome,Safari4+ */
            background: -webkit-linear-gradient(top,  rgba(255,255,255,0) 1%,rgba(255,255,255,0) 2%,rgba(255,255,255,1) 87%); /* Chrome10+,Safari5.1+ */
            background: -o-linear-gradient(top,  rgba(255,255,255,0) 1%,rgba(255,255,255,0) 2%,rgba(255,255,255,1) 87%); /* Opera 11.10+ */
            background: -ms-linear-gradient(top,  rgba(255,255,255,0) 1%,rgba(255,255,255,0) 2%,rgba(255,255,255,1) 87%); /* IE10+ */
            background: linear-gradient(to bottom,  rgba(255,255,255,0) 1%,rgba(255,255,255,0) 2%,rgba(255,255,255,1) 87%); /* W3C */
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00ffffff', endColorstr='#ffffff',GradientType=0 ); /* IE6-9 */
        }

        .options-toggle {
            display: block;
            line-height: 23px;
        }
        .options-toggle > i {
            line-height: 23px;
        }
    </style>
    {% stylesheets
        '@LineStormBlogBundle/Resources/public/css/dropzone.css'
        'bundles/linestormblog/css/select2.css'
        filter='cssrewrite' output='compiled/css/blog.css' %}
     <link rel="stylesheet" href="{{ asset_url }}" />
    {% endstylesheets %}

    {% javascripts
        '@LineStormBlogBundle/Resources/public/js/dropzone.js'
        '@LineStormBlogBundle/Resources/public/js/select2/select2.min.js'
        output='compiled/js/blog.js' %}
        <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}

    <script type="text/javascript" src="/bundles/linestormblog/js/ckeditor/ckeditor.js"></script>
    <script type="text/javascript" src="/bundles/linestormblog/js/ckeditor/adapters/jquery.js"></script>
    <script type="text/javascript">

        var contentCounts = {
            article: {count: {{ form.articles|length }} },
            gallery: {count: {{ form.galleries|length }} },
            gallery_images: {}
        };

        var savePost = function(callback_success, callback_failure){
            var form, data, field, fname, method;

            form = $('form[name="linestorm_blog_form_post"]');
            method = form[0].method;

            callback_success = callback_success || null;
            callback_failure = callback_failure || null;

            data = {};

            for(var i=0 ; i<form[0].length ; ++i){
                field = form[0][i];
                if(field.name){
                    fname = field.name;

                    if(field.name === '_method'){
                        method = field.value;
                    } else if(field.type === 'radio'){
                        data[fname] = data[fname] || [];
                        data[fname].push(field.value);
                    } else if(field.type === 'checkbox'){
                        data[fname] = field.checked ? field.value : null;
                    } else {
                        if(field.name.match(/\[\]$/)){
                            fname = field.name.replace(/\[\]$/, '');
                            data[fname] = data[fname] || [];
                            data[fname].push($(field).val());
                        } else {
                            data[fname] = $(field).val();
                        }
                    }
                }
            }

            var sData = serializeForm(data);

            $.ajax({
                url: form[0].action,
                type: method,
                data: JSON.stringify(sData),
                dataType: 'json',
                success: callback_success,
                error: callback_failure
            });

        };

        var serializeForm = function($form){

            var self = this,
                json = {},
                push_counters = {},
                patterns = {
                    "validate": /^[a-zA-Z][a-zA-Z0-9_]*(?:\[(?:\d*|[a-zA-Z0-9_]+)\])*$/,
                    "key":      /[a-zA-Z0-9_]+|(?=\[\])/g,
                    "push":     /^$/,
                    "fixed":    /^\d+$/,
                    "named":    /^[a-zA-Z0-9_]+$/
                };


            this.build = function(base, key, value){
                base[key] = value;
                return base;
            };

            this.push_counter = function(key){
                if(push_counters[key] === undefined){
                    push_counters[key] = 0;
                }
                return push_counters[key]++;
            };

            $.each($form, function(i,v){

                // skip invalid keys
                if(!patterns.validate.test(this.name)){
                    return;
                }

                var k,
                    keys = i.match(patterns.key),
                    merge = v,
                    reverse_key = i;

                while((k = keys.pop()) !== undefined){

                    // adjust reverse_key
                    reverse_key = reverse_key.replace(new RegExp("\\[" + k + "\\]$"), '');

                    // push
                    if(k.match(patterns.push)){
                        merge = self.build([], self.push_counter(reverse_key), merge);
                    }

                    // fixed
                    else if(k.match(patterns.fixed)){
                        merge = self.build([], k, merge);
                    }

                    // named
                    else if(k.match(patterns.named)){
                        merge = self.build({}, k, merge);
                    }
                }

                json = $.extend(true, json, merge);
            });

            return json;
        };

        var parseError = function(e, p){
            if(p === undefined){
                p = 'error';
            }
            var errors = {}, childErrors;
            for(var i in e){
                if(i === 'errors'){
                    errors[p] = e[i];
                } else if ("string" === typeof e[i] || e[i] instanceof Array){
                    errors[i] = e[i];
                } else {
                    childErrors = parseError(e[i], i);
                    for (var attrname in childErrors) { errors[attrname] = childErrors[attrname]; }
                }
            }

            return errors;
        };

        $(document).ready(function(){
            $('form[name="linestorm_blog_form_post"]').on('submit', function(e){
                e.preventDefault();
                e.stopPropagation();
                $('#FormErrors').slideUp(function(){ $(this).html(''); });
                savePost(function(on, status, xhr){
                    if(xhr.status === 200){
                        alert('updated!');
                    } else if(xhr.status === 201) {
                        alert('created!');
                    } else {
                        alert('saved ('+xhr.status+')!');
                    }
                }, function(e, status, ex){
                    if(e.status === 400){
                        if(e.responseJSON){
                            var errors = parseError(e.responseJSON.errors);
                            var str = '';
                            for(var i in errors){
                                if(errors[i].length)
                                    str += "<p class=''><strong style='text-transform:capitalize;'>"+i+":</strong> "+errors[i].join(', ')+"</p>";
                             }
                            $('#FormErrors').html(str).slideDown();
                        } else {
                            alert(status);
                        }
                    }
                });

                return false;
            });

            var $articleCollectionHolder, $addArticleLink, $addGalleryLink;

            $articleCollectionHolder = $('.post-components');
            $addArticleLink = $('a.post-component-new.article-new');

            $addArticleLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // Get the data-prototype explained earlier
                var prototype = $(this).data('prototype');

                // add a new tag form (see next code block)
                var $el = addForm($articleCollectionHolder, prototype, contentCounts.article);
                $el.find('input[type="hidden"]').val(contentCounts.gallery.count);
                $el.find('[data-role="textarea"],textarea').ckeditor().focus();
            });

            $addGalleryLink = $('a.post-component-new.gallery-new');
            $addGalleryLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // Get the data-prototype explained earlier
                var prototype = $(this).data('prototype');

                // add a new tag form (see next code block)
                var $el = addForm($articleCollectionHolder, prototype, contentCounts.gallery);
                $el.find('input[type="hidden"]').val(contentCounts.gallery.count);
                $el.find('[data-role="textarea"],textarea').ckeditor().focus();

                setupDropzone($el.find('.dropzone')[0]);
            });

            // add ckeditor to all the pre-loaded articles
            $articleCollectionHolder.find('textarea.ckeditor-textarea').ckeditor();
            $articleCollectionHolder.find('.item-gallery').each(function(){
                setupDropzone($(this).find('.dropzone')[0]);
                $(this).find('textarea.gallery-body').ckeditor();
            });

            // set up the sortable content
            $articleCollectionHolder.sortable({
                handle: '.item-reorder',
                axis: 'y',
                start: function(e, ui){

                    $(e.target).children().addClass('fade-overlay');
                    $(this).sortable('refreshPositions');

                    // save the ckeditor state and destroy it else is breaks on sorting stop
                    var tarea = ui.item.find('textarea.ckeditor-textarea');
                    if(tarea.length){
                        tarea.data('value', tarea.val()).val('Moving...');
                        var ck = tarea.ckeditorGet();
                        ck.destroy();
                    }
                },
                stop:function(e,ui){

                    $(e.target).children().removeClass('fade-overlay');
                    $(this).sortable('refreshPositions');

                    // rebuild ckeditor
                    var tarea = ui.item.find('textarea.ckeditor-textarea');
                    if(tarea.length){
                        tarea.val(tarea.data('value'));
                        tarea.ckeditor();
                    }

                    // update the order
                    $articleCollectionHolder.children('li').each(function(i, li){
                        var $li = $(li);
                        var $order = $li.find('input[name*="[order]"]');
                        $order.val(i);
                    });
                }
            });

            // configure remove button
            $articleCollectionHolder.on('click', 'button.item-remove', function(){
                if(confirm('Are you sure you want to remove this item?\n\nNOTE: IT CANNOT BE UNDONE ONCE SAVED')){
                    var i = $(this).data('count');
                    $(this).closest('.post-component-item').parent().remove();
                    --contentCounts[i];
                }
            });

            $(document).on('click', '.options-toggle', function(){
                $(this).next('.'+$(this).data('toggle')).slideToggle();
                return false;
            });
        });

        // add a new form to the page from a prototype
        function addForm($collectionHolder, prototype, indexer, name) {
            var newForm, newContainer, $elementHtml;

            if(indexer === undefined){
                console.log('addForm: indexer must be defined');
                return;
            }

            if(name === undefined)
                name = '__name__'

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have#
            var rgx = new RegExp(name, 'g');
            newForm = prototype.replace(rgx, indexer.count);
            indexer.count++;

            newContainer = $collectionHolder.data('prototype').replace(/__widget__/, newForm);

            $elementHtml = $(newContainer);
            $collectionHolder.append($elementHtml);

            return $elementHtml;
        }

        // setup dropzone
        Dropzone.autoDiscover = false;
        var setupDropzone = function(placeholder){

            var $p = $(placeholder),
                localCount, carrosselDropZone;

            contentCounts.gallery_images[contentCounts.gallery.count] = {count: $p.find('.dz-preview').length || 0};
            localCount = contentCounts.gallery_images[contentCounts.gallery.count];

            // bind the remove button as it won't be set by dropzone on init
            $p.find('.dz-remove').on('click', function(){
                $(this).closest('.dz-preview').remove();
                --localCount.count;
            });

            carrosselDropZone = new Dropzone(placeholder, {
                url: window.lineStormTags.mediaBank.upload,
                acceptedFiles: 'image/*',
                init: function(){
                    this.on("success", function(file, response) {
                        if(file.xhr.status == 200){
                            alert('An identical file already exists and has been returned.');
                        }
                        var dzForm = $(file.previewElement).find('.dz-image-form'),
                            idx = localCount.count
                        ;
                        var $form = addForm(dzForm, $(placeholder).data('prototype'), localCount, '__img_name__');

                        $form.find('input[name*="[hash]"]').val(response.hash);
                        $form.find('input[name*="[src]"]').val(response.src);

                        $form.find('input[name*="[title]"]').val(response.title);
                        $form.find('input[name*="[description]"]').val(response.description);
                        $form.find('input[name*="[alt]"]').val(response.alt);
                        $form.find('input[name*="[seo]"]').val(response.seo);

                        $form.find('input[name*="[order]"]').val(idx);
                    });
                    this.on("error", function(file, response) {
                        this.removeFile(file);
                        alert("Cannot add file: "+response);
                    });
                    this.on("removedfile", function(file){
                        --localCount.count;
                    });
                },
                previewTemplate: $p.data('preview')
            });
        };

    </script>


    <div id="FormErrors" class="alert alert-danger" style="display: none;">

    </div>

    {{ form_start(form) }}
        {{ form_row(form.title) }}
        {{ form_row(form.liveOn) }}
        {{ form_row(form.category) }}

        <hr />

        <a href="#" class="options-toggle" data-toggle="extra-options">Extra Options <i class="pull-right fa-angle-down"></i></a>
        <div class="extra-options" style="display: none">
            {{ form_row(form.slug,              {help: 'User friendly URL fragment. If left blank, will be derived from title.'}) }}
            {{ form_row(form.blurb,             {help: 'Preview text. If left blank, will be derived from content.'}) }}
        </div>

        <hr />

        <a href="#" class="options-toggle" data-toggle="seo-options">SEO Options <i class="pull-right fa-angle-down"></i></a>
        <div class="seo-options" style="display: none">
            {{ form_row(form.metaDescription,   {help: 'Head meta description'}) }}
            {{ form_row(form.metaKeywords,      {help: 'Head meta keywords'}) }}
        </div>

        <hr />

        <h3>Meta Data</h3>
        {{ form_row(form.tags, { attr: {class: 'tag-search'} }) }}
        <script type="text/javascript">
            $('.tag-search').select2({
                tags: $('.tag-search').data('options').split(','),
                tokenSeparators: [',', ' ', ';']
            });
        </script>

        <hr />

        <h3>Content
            <div class="pull-right btn-group">
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown">
                    Add Content <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li class="post-component-new-container">
                        <a href="#" class="post-component-new article-new" data-prototype="{{ form_widget(form.articles.vars.prototype)|e }}">Article</a>
                    </li>
                    <li>
                        <a href="#" class="post-component-new gallery-new" data-prototype="{{ form_widget(form.galleries.vars.prototype)|e }}">Gallery</a>
                    </li>
                </ul>
            </div>
        </h3>
        <div class="post-component-container">

            <ul class="post-components" data-prototype='<li><div class="post-component-item"><div class="post-component-item-widget">__widget__</div><div class="post-component-item-controls"><button type="button" class="btn btn-default item-remove" title="Remove This Article" data-count="article"><i class="fa-times"></i></button><span type="button" class="btn btn-default item-reorder" title="Click and Drag to Reorder"><i class="fa-arrows-v"></i></span></div></div></li>'>
                {% for article in form.articles %}
                    <li>
                        <div class="post-component-item item-article">
                            <div class="post-component-item-widget">{{ form_widget(article) }}</div>
                            <div class="post-component-item-controls">
                                <button type="button" class="btn btn-default item-remove" title="Remove This Article" data-count="article"><i class="fa-times"></i></button>
                                <span type="button" class="btn btn-default item-reorder" title="Click and Drag to Reorder"><i class="fa-arrows-v"></i></span>
                            </div>
                        </div>
                    </li>
                {% endfor %}
                {% for gallery in form.galleries %}
                    <li>
                        <div class="post-component-item item-gallery">
                            <div class="post-component-item-widget">{{ form_widget(gallery) }}</div>
                            <div class="post-component-item-controls">
                                <button type="button" class="btn btn-default item-remove" title="Remove This Gallery" data-count="gallery"><i class="fa-times"></i></button>
                                <span type="button" class="btn btn-default item-reorder" title="Click and Drag to Reorder"><i class="fa-arrows-v"></i></span>
                            </div>
                        </div>
                    </li>
                {% endfor %}
            </ul>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-sm-12">
                <button type="submit" class="btn btn-default post-save">Save</button>
            </div>
        </div>

    {{ form_end(form) }}

{% endblock %}
